%/*******************************************************************************
% * FILENAME:	robobt_p1_v2	
% * DESCRIPTION:Encode an ASP solver in clingo to find the path of a single robot R that needs
%
% * to move object a to location A
% * AUTHOR:	James Matthew Welch [JMW]
% * SCHOOL: 	Arizona State University
% * CLASS:	CSE471/598: Introduction to Artificial Intelligence
% * INSTRUCTOR:	Joohyung Lee
% * SECTION:	18115 
% * TERM:	Spring 2014
% ******************************************************************************/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% object declaration
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
step(0..maxstep).
astep(0..maxstep-1).
axis(1..6).
direction(left;up;right;down).
robot(r1).
boolean(true;false).

#domain step(ST).
#domain astep(T).
#domain direction(D).

% 2-dimensional maze
#domain axis(X).
#domain axis(XX).
#domain axis(Y).
#domain axis(YY).
#domain robot(R).
#domain boolean(B).

% variables describing objects
object(a).
#domain object(OB).
#domain object(OB1).

%%%%%%%%%%%%%%%%%%%%%%%%%%
% state description
%%%%%%%%%%%%%%%%%%%%%%%%%%
% a function describing robot movement
% for every robot,R, and time step ST, chose no more than one movement
0{move(R,D1,T): direction(D1)}1 :- robot(R), astep(T).

% functions to control objects
0{pickup(R,OBa,T):     object(OBa)}1 :- robot(R), astep(T).
0{place(R,OBa,T):      object(OBa)}1 :- robot(R), astep(T).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% effects and preconditions of actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% effects of robot movement
ron(R,X-1,  Y,T+1) :- move(R,left,T), ron(R,X,Y,T).
ron(R,  X,Y+1,T+1) :- move(R,up,T), ron(R,X,Y,T).
ron(R,X+1,  Y,T+1) :- move(R,right,T), ron(R,X,Y,T).
ron(R,  X,Y-1,T+1) :- move(R,down,T), ron(R,X,Y,T).

% restrict movement when at the edges of the area
% walls are further down
:- move(R,left,T),  ron(R,1,Y,T).
:- move(R,up,T),    ron(R,X,6,T).
:- move(R,right,T), ron(R,6,Y,T).
:- move(R,down,T),  ron(R,X,1,T).

% effect of robot movement on held object 
on(OBa,X,Y,T+1) :- has(R,OBa,true,T), ron(R,X,Y,T+1).

% robot cannot pickup an object if it is not in the same column
% use local to refer to that object
:- pickup(R,OBa,T), ron(R,X,Y,T), on(OBa,XX,YY,T), XX!=X.
% robot cannot pickup an object if it is not in the same row
:- pickup(R,OBa,T), ron(R,X,Y,T), on(OBa,XX,YY,T), YY!=Y.

% effects of pickup and place on robot
has(R,OB,true, T+1) :- pickup(R,OB,T).
has(R,OB,false,T+1) :-  place(R,OB,T).
% effects of pickup and place on object
isheld(OB,true, T+1) :- pickup(R,OB,T).
isheld(OB,false,T+1) :-  place(R,OB,T).

%%%%%%%%%%%%%%%%%%%%%%%%
% inertial constraints
%%%%%%%%%%%%%%%%%%%%%%%%
% if robot has not moved in ANY of the 4 directions, it is in the same place
%ron(R1,X,Y,T+1) :- not move(R1,left,T), not move(R1,up,T), not move(R1,right,T), not move(R1,down,T), ron(R1,X,Y,T).
{ron(R,X,Y,T+1)} :- ron(R,X,Y,T).
on(OBa,X,Y,T+1) :- isheld(OBa,false,T), on(OBa,X,Y,T).
{on(OBa,X,Y,T+1)} :- on(OBa,X,Y,T).

% robot still has/doesn't have objects unless it places/picks them up
{has(R,OB,B, T+1)} :- has(R,OB,B,T).

{isheld(OB,B,T+1)} :- isheld(OB,B,T).
% need to add extra condition for two robots holding the object

%%%%%%%%%%%%%%%%
%% constraints
%%%%%%%%%%%%%%%%

%% limit robot capacity: if a robot has an object, it may not pickup another object (problem 3-5)
%:- has(R1,OBa,true,T), pickup(R1,OBb,T), OBa!=OBb.
%:- has(R1,OBa,true,T), place(R1,OBb,T), OBa!=OBb.

% robot cannot pickup any object and move in the same turn
:- pickup(R,OB,T), move(R,D,T).
% robot cannot pickup and place any object in the same turn (waste of action or conflict with multiple objects)
:- pickup(R,OB,T), place(R,OB,T).
% robot cannot place any object and move in the same turn
:- place(R,OB,T),  move(R,D,T).

% robot cannot place any object if it does not have the object
:- place(R,OB,T), has(R,OB,false,T), isheld(OB,false,T).
% robot cannot pickup any object if it already has the object (waste of an action)
:- pickup(R,OB,T), has(R,OB,true,T).
% robot cannot pickup any object and another object at the same time (problems 2-5)
%:- pickup(R,OBa,T), pickup(R,OBb,T), OBa!=OBb.
% robot cannot place any object and another object at the same time (problems 2-5)
%:- place(R1,OBa,T), place(R1,OBb,T), OBa!=OBb.

% two robots may not have an object at the same time  (problems 4,5)
%TODO: this needs to be amended (new rule for HEAVY) for the HEAVY case
%:- has(R1,OBa,true,ST), has(R2,OBa,true,ST), R1!=R2, step(ST).

% uniqueness constraints: must have exactly one value for each
:- not 1{has(R,OB,BB,ST): boolean(BB)}1, step(ST).
:- not 1{isheld(OB,BB,ST): boolean(BB)}1, step(ST).
:- not 1{ron(R,X1,Y1,ST): axis(X1): axis(Y1)}1, step(ST).
:- not 1{on(OB,X1,Y1,ST): axis(X1): axis(Y1)}1, step(ST).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% domain independent axioms
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% actions are exogenous
{move(R,D,T)}.
{place(R,OB,T)}.
{pickup(R,OB,T)}.
% fluents are initially exogenous but decided as the result of actions thereafter
{on(OB,X,Y,0)}.
{ron(R,X,Y,0)}.
{has(R,OB,B,0)}.
{isheld(OB,B,0)}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% planning
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% walls: 
:- ron(R,1,1,T), move(R,up,T).
:- ron(R,2,1,T), move(R,up,T).
:- ron(R,4,1,T), move(R,up,T).
:- ron(R,4,1,T), move(R,right,T).
:- ron(R,5,1,T), move(R,left,T).
:- ron(R,5,1,T), move(R,up,T).

:- ron(R,1,2,T), move(R,down,T).
:- ron(R,2,2,T), move(R,right,T).
:- ron(R,2,2,T), move(R,down,T).
:- ron(R,3,2,T), move(R,left,T).
:- ron(R,4,2,T), move(R,up,T).
:- ron(R,4,2,T), move(R,down,T).
:- ron(R,5,2,T), move(R,up,T).
:- ron(R,5,2,T), move(R,down,T).

:- ron(R,1,3,T), move(R,up,T).
:- ron(R,2,3,T), move(R,up,T).
:- ron(R,4,3,T), move(R,right,T).
:- ron(R,4,3,T), move(R,down,T).
:- ron(R,5,3,T), move(R,left,T).
:- ron(R,5,3,T), move(R,up,T).
:- ron(R,5,3,T), move(R,down,T).
:- ron(R,6,3,T), move(R,up,T).

:- ron(R,1,4,T), move(R,up,T).
:- ron(R,1,4,T), move(R,down,T).
:- ron(R,2,4,T), move(R,up,T).
:- ron(R,2,4,T), move(R,down,T).
:- ron(R,3,4,T), move(R,right,T).
:- ron(R,4,4,T), move(R,left,T).
:- ron(R,4,4,T), move(R,up,T).
:- ron(R,5,4,T), move(R,up,T).
:- ron(R,5,4,T), move(R,down,T).
:- ron(R,6,4,T), move(R,down,T).

:- ron(R,1,5,T), move(R,up,T).
:- ron(R,1,5,T), move(R,down,T).
:- ron(R,2,5,T), move(R,up,T).
:- ron(R,2,5,T), move(R,down,T).
:- ron(R,3,5,T), move(R,right,T).
:- ron(R,4,5,T), move(R,left,T).
:- ron(R,4,5,T), move(R,down,T).
:- ron(R,5,5,T), move(R,up,T).
:- ron(R,5,5,T), move(R,down,T).
:- ron(R,6,5,T), move(R,up,T).

:- ron(R,1,6,T), move(R,down,T).
:- ron(R,2,6,T), move(R,down,T).
:- ron(R,3,6,T), move(R,right,T).
:- ron(R,4,6,T), move(R,left,T).
:- ron(R,5,6,T), move(R,down,T).
:- ron(R,6,6,T), move(R,down,T).

% initial conditions
:- not ron(r1,1,6,0).
:- not on(a,1,2,0).
:- has(R,OB,true,0).
:- isheld(OB,true,0).

% final conditions
:- not on(a,6,6,maxstep).
:- isheld(OB,true,maxstep).

% hide variables that are constants
#hide.
% show only the variables that are relevant to the path
#show move/3.
#show pickup/3.
#show place/3.
