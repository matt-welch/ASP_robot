% file 'robot'
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% object declaration
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
step(0..maxstep).
astep(0..maxstep-1).
axis(1..6).
% corresponds to directions (none, left, up, right, down)
% move(0) means do nothing
direction(1..4).
robot(ra).
boolean(true;false).

#domain step(ST).
#domain astep(T).
#domain direction(D).

% 2-dimensional maze
#domain axis(X).
#domain axis(XX).
#domain axis(Y).
#domain axis(YY).
#domain robot(R).
#domain boolean(B).

% variables describing objects
object(a).
#domain object(OB).
#domain object(OB1).

%%%%%%%%%%%%%%%%%%%%%%%%%%
% state description
%%%%%%%%%%%%%%%%%%%%%%%%%%
% a function mapping from robot and position to time
% for every robot,R, and time step ST, chose exactly one x and y position
1{ron(R,X1,Y1,ST) : axis(X1) : axis(Y1)}1 :- robot(R), step(ST).

% a function describing robot movement
% for every robot,R, and time step ST, chose exactly one movement
1{move(R,D1,T): direction(D1)}1 :- robot(R), astep(T).

% effects of robot movement
ron(R,  X,  Y,T+1) :- move(R,0,T), ron(R,X,Y,T).
ron(R,X-1,  Y,T+1) :- move(R,1,T), ron(R,X,Y,T).
ron(R,  X,Y+1,T+1) :- move(R,2,T), ron(R,X,Y,T).
ron(R,X+1,  Y,T+1) :- move(R,3,T), ron(R,X,Y,T).
ron(R,  X,Y-1,T+1) :- move(R,4,T), ron(R,X,Y,T).

% restrict movement when at the edges of the area
:- move(R,1,T), ron(R,1,Y,T).
:- move(R,2,T), ron(R,X,6,T).
:- move(R,3,T), ron(R,6,Y,T).
:- move(R,4,T), ron(R,X,1,T).

% functions to control objects
1{has(R,OBa,Bool,ST): object(OBa): boolean(Bool)}1 :- robot(R), step(ST).
%0{pickup(R,OBa,T): object(OBa)}1 :- robot(R), astep(T).
%0{place(R,OBa,T):  object(OBa)}1 :- robot(R), astep(T).
1{on(OB,X1,Y1,ST): axis(X1): axis(Y1)}1 :- object(OB), step(ST).
on(OB,X,Y,ST+1):-on(OB,X,Y,ST).

has(R,OB1,true,ST+1)  :- has(R,OB1,true,ST).
has(R,OB1,false,ST+1)  :- has(R,OB1,false,ST).
%has(R,OB1,false,ST+1) :- place(R,OB1,T), has(R,OB1,true,ST).
%has(R,OB1,true,ST+1)  :- pickup(R,OB1,T), has(R,OB1,false,ST).

% TODO: define on() function for objects
% TODO: add on() requirement for pickup
% TODO: define move+has to move object

%%%%%%%%%%%%%%%%
%% constraints
%%%%%%%%%%%%%%%%
% in the generation rule above
% uniqueness constraint for all locations, a robot may only be on one location at a time
%:- not 1{ron(R,X1,Y1,ST): axis(X1) : axis(Y1) }1 .

% in the generation rule above
% % uniqueness constraint for movement - only one direction at a time
%:- not 1{move(R,D,T)}1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% domain independent axioms
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%ron(R,X,Y,T+1) :- not move(R,D,T), ron(R,X,Y,T).
% actions are exogenous
% {move(R,X,Y,T) : axis(X) : axis(Y)}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% planning
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% walls: 
:- ron(R,1,1,T), move(R,2,T).
:- ron(R,2,1,T), move(R,2,T).
:- ron(R,4,1,T), move(R,2,T).
:- ron(R,4,1,T), move(R,3,T).
:- ron(R,5,1,T), move(R,1,T).
:- ron(R,5,1,T), move(R,2,T).

:- ron(R,1,2,T), move(R,4,T).
:- ron(R,2,2,T), move(R,3,T).
:- ron(R,2,2,T), move(R,4,T).
:- ron(R,3,2,T), move(R,1,T).
:- ron(R,4,2,T), move(R,2,T).
:- ron(R,4,2,T), move(R,4,T).
:- ron(R,5,2,T), move(R,2,T).
:- ron(R,5,2,T), move(R,4,T).

:- ron(R,1,3,T), move(R,2,T).
:- ron(R,2,3,T), move(R,2,T).
:- ron(R,4,3,T), move(R,3,T).
:- ron(R,4,3,T), move(R,4,T).
:- ron(R,5,3,T), move(R,1,T).
:- ron(R,5,3,T), move(R,2,T).
:- ron(R,5,3,T), move(R,4,T).
:- ron(R,6,3,T), move(R,2,T).

:- ron(R,1,4,T), move(R,2,T).
:- ron(R,1,4,T), move(R,4,T).
:- ron(R,2,4,T), move(R,2,T).
:- ron(R,2,4,T), move(R,4,T).
:- ron(R,3,4,T), move(R,3,T).
:- ron(R,4,4,T), move(R,1,T).
:- ron(R,4,4,T), move(R,2,T).
:- ron(R,5,4,T), move(R,2,T).
:- ron(R,5,4,T), move(R,4,T).
:- ron(R,6,4,T), move(R,4,T).

:- ron(R,1,5,T), move(R,2,T).
:- ron(R,1,5,T), move(R,4,T).
:- ron(R,2,5,T), move(R,2,T).
:- ron(R,2,5,T), move(R,4,T).
:- ron(R,3,5,T), move(R,3,T).
:- ron(R,4,5,T), move(R,1,T).
:- ron(R,4,5,T), move(R,4,T).
:- ron(R,5,5,T), move(R,2,T).
:- ron(R,5,5,T), move(R,4,T).
:- ron(R,6,5,T), move(R,2,T).

:- ron(R,1,6,T), move(R,4,T).
:- ron(R,2,6,T), move(R,4,T).
:- ron(R,3,6,T), move(R,3,T).
:- ron(R,4,6,T), move(R,1,T).
:- ron(R,5,6,T), move(R,4,T).
:- ron(R,6,6,T), move(R,4,T).

% initial conditions
:- not ron(R,4,1,0).
:- not on(OB,3,5,0).
:- has(R,OB,true,0).

% final conditions
:- not ron(R,3,5,maxstep).

% hide variables that are constants
#hide axis/1.
#hide robot/1.
#hide step/1.
#hide astep/1.
#hide direction/1.
#hide boolean/1.
#hide object/1.
