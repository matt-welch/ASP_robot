%/*******************************************************************************
% * FILENAME:	robobt_p4
% * DESCRIPTION:Encode an ASP solver in clingo to find the path of two robots, R1
% * and R2 that need to move multiple objects to goal locations. The robots may not 
% * hold multiple objects simultaneously.
% * AUTHOR:	James Matthew Welch [JMW]
% * SCHOOL: 	Arizona State University
% * CLASS:	CSE471/598: Introduction to Artificial Intelligence
% * INSTRUCTOR:	Joohyung Lee
% * SECTION:	18115 
% * TERM:	Spring 2014
% ******************************************************************************/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% object declaration
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
step(0..maxstep).
astep(0..maxstep-1).
axis(1..6).
direction(left;up;right;down).
robot(r1;r2).
boolean(true;false).

#domain step(ST).
#domain astep(T).
#domain direction(D).

% 2-dimensional maze
#domain axis(X).
#domain axis(XX).
#domain axis(Y).
#domain axis(YY).
#domain robot(R).
#domain boolean(B).

% variables describing objects
object(a;b).
#domain object(OB).
#domain object(OB1).

%%%%%%%%%%%%%%%%%%%%%%%%%%
% state description
%%%%%%%%%%%%%%%%%%%%%%%%%%
% a function mapping from robot and position to time
% for every robot,R, and time step ST, chose exactly one x and y position
%1{ron(R,X1,Y1,ST) : axis(X1) : axis(Y1)}1 :- robot(R), step(ST).

% a function describing robot movement
% for every robot,R, and time step ST, chose no more than one movement
0{move(R,D1,T): direction(D1)}1 :- robot(R), astep(T).

% functions to control objects
% the following rule allows a robot to arbitrarily hold an object at any time
%1{has(R,OB,B,ST): boolean(B)}1 :- object(OBa), robot(R), step(ST).
0{pickup(R,OBa,T)  : object(OBa)}1   :- robot(R), astep(T).
0{place(R,OBa,T)   : object(OBa)}1   :- robot(R), astep(T).
%1{on(OB,X1,Y1,ST):    axis(X1): axis(Y1)}1 :- object(OB), step(ST).
% the following rule allows the object to be arbitrarily held at any moment in time
%1{isheld(OB,B,ST): boolean(B)}1      :- object(OB), step(ST).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% effects and preconditions of actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% effectss of robot movement on robot position
ron(R,X-1,  Y,T+1) :- move(R,left,T), ron(R,X,Y,T).
ron(R,  X,Y+1,T+1) :- move(R,up,T), ron(R,X,Y,T).
ron(R,X+1,  Y,T+1) :- move(R,right,T), ron(R,X,Y,T).
ron(R,  X,Y-1,T+1) :- move(R,down,T), ron(R,X,Y,T).

% restrict movement when at the edges of the area
% walls are further down
:- move(R,left,T),  ron(R,1,Y,T).
:- move(R,up,T),    ron(R,X,6,T).
:- move(R,right,T), ron(R,6,Y,T).
:- move(R,down,T),  ron(R,X,1,T).

% effect of robot movement on held object position
on(OBa,X,Y,T+1) :- has(R,OBa,true,T), ron(R,X,Y,T+1).

% robot cannot pickup an object if it is not in the same column
:- pickup(R1,OBa,T), ron(R1,X,Y,T), on(OBa,XX,YY,T), XX!=X.
% robot cannot pickup an object if it is not in the same row
:- pickup(R1,OBa,T), ron(R1,X,Y,T), on(OBa,XX,YY,T), YY!=Y.

% effects of pickup and place on robot
has(R1,OBa,true, T+1) :- pickup(R1,OBa,T).
%on(R,X,Y,T+1) :- pickup(R,OB,T), on(R,X,Y,T).
has(R1,OBa,false,T+1) :- place(R1,OBa,T).
%on(R,X,Y,T+1) :- place(R,OB,T), on(R,X,Y,T).
% effects of pickup and place on object
isheld(OBa,true, T+1) :- pickup(R1,OBa,T).
isheld(OBa,false,T+1) :- place(R1,OBa,T).

%%%%%%%%%%%%%%%%%%%%%%%%
% inertial constraints
%%%%%%%%%%%%%%%%%%%%%%%%
% if robot has not moved in ANY of the 4 directions, it is in the same place
%ron(R1,X,Y,T+1) :- not move(R1,left,T), not move(R1,up,T), not move(R1,right,T), not move(R1,down,T), ron(R1,X,Y,T).
{ron(R,X,Y,T+1)} :- ron(R1,X,Y,T).
on(OBa,X,Y,T+1) :- isheld(OBa,false,T), on(OBa,X,Y,T).
%{on(OBa,X,Y,T+1)} :- on(OBa,X,Y,T).

% robot still has/doesn't have objects unless it places/picks them up
%has(R1,OBa,true, T+1) :- has(R1,OBa,true,T),   not place(R1,OBa,T).
{has(R,OB,B, T+1)} :- has(R,OB,B,T).
%has(R1,OBa,false,T+1) :- has(R1,OBa,false,T),  not pickup(R1,OBa,T).

% TODO: I think these need to be global R rather than local-R1 because they are only constant if all robots do not modify them, but still don't understand why gives "unsafe variable" error
% if a particular object is held and no robot places it, it will remain held
%isheld(OBa,true, T+1) :- isheld(OBa,true,T),  not place(R,OBa,T).
%isheld(a,false, T+1) :- isheld(a,false,T),  not pickup(R,a,T).
%isheld(b,false, T+1) :- isheld(b,false,T),  not pickup(r2,b,T).
{isheld(OB,B,T+1)} :- isheld(OB,B,T).
%isheld(a,true, T+1) :- isheld(a,true,T),  not place(r1,a,T).
%isheld(b,true, T+1) :- isheld(b,true,T),  not place(r2,b,T).
%% if a particular object is held and no robot pickup object, it will remain unheld
%isheld(OBa,false,T+1) :- isheld(OBa,false,T), not pickup(R,OBa,T).
%% TODO: need to add extra condition for two robots holding the object

%%%%%%%%%%%%%%%%
%% constraints
%%%%%%%%%%%%%%%%

% limit robot capacity: if a robot has an object, it may not pickup another object
:- has(R1,OBa,true,T), pickup(R1,OBb,T), OBa!=OBb.
:- has(R1,OBa,true,T), place(R1,OBb,T), OBa!=OBb.

% following rules use the global OB indicating that a robot cannot simultaneously 
% work on multiple objects
% robot cannot pickup any object and move in the same turn
:- pickup(R1,OB,T), move(R1,D,T).
% robot cannot pickup and place any object in the same turn
:- pickup(R1,OBa,T), place(R1,OBb,T), OBa!=OBb.
% robot cannot place any object and move in the same turn
:- place(R1,OB,T),  move(R1,D,T).
%% robot should do SOMEthing in each turn
%:- not move(R,D,T), not place(R,OB,T), not pickup(R,OB,T).

% robot cannot place any object if it does not have the object
%:- place(R,OB,T), has(R,OB,false,T).
%:- place(R,OB,T), not has(R,OB,true,T).
%:- place(R,OB,T), isheld(OB,false,T).
%:- place(R,OB,T), not isheld(OB,true,T).
% robot cannot pickup any object if it already has the object (waste of an action)
:- pickup(R1,OBa,T), has(R1,OBa,true,T).
% robot cannot pickup any object and another object at the same time
:- pickup(R1,OBa,T), pickup(R1,OBb,T), OBa!=OBb.
% robot cannot place any object and another object at the same time
:- place(R1,OBa,T), place(R1,OBb,T), OBa!=OBb.
:- place(R,OB,T), not isheld(OB,true,T).


% an object cannot be picked up if it is already held  TODO different for HEAVY
%:- pickup(R,OBa,T), isheld(OBa,true,T).
% two robots may not have an object at the same time TODO: this needs to be amended (new rule for HEAVY) for the HEAVY case
:- has(R1,OBa,true,T), has(R2,OBa,true,T), R1!=R2.

% uniqueness constraints: must have exactly one value for each
:- not 1{has(R,OB,BB,T): boolean(BB)}1.
:- not 1{isheld(OB,BB,T): boolean(BB)}1.
:- not 1{ron(R,X1,Y1,T): axis(X1): axis(Y1)}1.
:- not 1{on(OB,X1,Y1,T): axis(X1): axis(Y1)}1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% domain independent axioms
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% actions are exogenous
{move(R,D,T)}.
{place(R,OB,T)}.
{pickup(R,OB,T)}.
% fluents are initially exogenous but decided as the result of actions thereafter
{on(OB,X,Y,0)}.
{ron(R,X,Y,0)}.
{has(R,OB,B,0)}.
{isheld(OB,B,0)}.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% planning
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% walls: 
:- ron(R,1,1,T), move(R,up,T).
:- ron(R,2,1,T), move(R,up,T).
:- ron(R,4,1,T), move(R,up,T).
:- ron(R,4,1,T), move(R,right,T).
:- ron(R,5,1,T), move(R,left,T).
:- ron(R,5,1,T), move(R,up,T).

:- ron(R,1,2,T), move(R,down,T).
:- ron(R,2,2,T), move(R,right,T).
:- ron(R,2,2,T), move(R,down,T).
:- ron(R,3,2,T), move(R,left,T).
:- ron(R,4,2,T), move(R,up,T).
:- ron(R,4,2,T), move(R,down,T).
:- ron(R,5,2,T), move(R,up,T).
:- ron(R,5,2,T), move(R,down,T).

:- ron(R,1,3,T), move(R,up,T).
:- ron(R,2,3,T), move(R,up,T).
:- ron(R,4,3,T), move(R,right,T).
:- ron(R,4,3,T), move(R,down,T).
:- ron(R,5,3,T), move(R,left,T).
:- ron(R,5,3,T), move(R,up,T).
:- ron(R,5,3,T), move(R,down,T).
:- ron(R,6,3,T), move(R,up,T).

:- ron(R,1,4,T), move(R,up,T).
:- ron(R,1,4,T), move(R,down,T).
:- ron(R,2,4,T), move(R,up,T).
:- ron(R,2,4,T), move(R,down,T).
:- ron(R,3,4,T), move(R,right,T).
:- ron(R,4,4,T), move(R,left,T).
:- ron(R,4,4,T), move(R,up,T).
:- ron(R,5,4,T), move(R,up,T).
:- ron(R,5,4,T), move(R,down,T).
:- ron(R,6,4,T), move(R,down,T).

:- ron(R,1,5,T), move(R,up,T).
:- ron(R,1,5,T), move(R,down,T).
:- ron(R,2,5,T), move(R,up,T).
:- ron(R,2,5,T), move(R,down,T).
:- ron(R,3,5,T), move(R,right,T).
:- ron(R,4,5,T), move(R,left,T).
:- ron(R,4,5,T), move(R,down,T).
:- ron(R,5,5,T), move(R,up,T).
:- ron(R,5,5,T), move(R,down,T).
:- ron(R,6,5,T), move(R,up,T).

:- ron(R,1,6,T), move(R,down,T).
:- ron(R,2,6,T), move(R,down,T).
:- ron(R,3,6,T), move(R,right,T).
:- ron(R,4,6,T), move(R,left,T).
:- ron(R,5,6,T), move(R,down,T).
:- ron(R,6,6,T), move(R,down,T).

%%%% TODO DELETE DEBUGGING CONDITIONS
% initial conditions for debugging (short path)
:- not ron(r1,1,6,0).
:- not on(a,2,6,0).
:- not ron(r2,1,1,0).
:- not on(b,2,1,0).
:- not has(R,OB,false,0).
:- not isheld(OB,false,0).

% actions
%move(r1,right,0).
%move(r2,right,0).
%pickup(r1,a,1).
%pickup(r2,b,1).
%move(r1,right,2).
%move(r2,right,2).
%place(r1,a,3).
%place(r2,b,3).

% final conditions
:- not on(a,3,6,maxstep).
:- not on(b,3,1,maxstep).
:- has(R,OB,true,0).
:- isheld(OB,true,maxstep).
%%%%%

%% initial conditions
%:- not ron(r1,1,6,0).
%:- not on(a,1,2,0).
%:- not on(b,1,1,0).
%:- not on(c,5,1,0).
%:- has(R,OB,true,0).
%:- isheld(OB,true,0).
%
%% final conditions
%:- not on(a,6,6,maxstep).
%:- not on(b,5,3,maxstep).
%:- not on(c,1,4,maxstep).
%:- has(R,OB,true,0).
%:- isheld(OB,true,maxstep).

% hide variables that are constants
#hide.
% show only the variables that are relevant to the path
#show on/4.
#show ron/4.
#show move/3.
#show pickup/3.
#show place/3.
#show isheld/3.
#show has/4.
